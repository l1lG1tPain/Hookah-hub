// src/pages/profile/ProfilePage.js ‚Äî –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê

const LS_SESSION = 'hhsession';          // —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
const LS_USER    = 'hh:user_safe';       // { id, short, name, avatar_url }
const AVATAR_FALLBACK = 'https://placehold.co/128x128?text=HH';

// -- Storage helpers ----------------------------------------------------------
function getSession(){ try { return localStorage.getItem(LS_SESSION) || ''; } catch { return ''; } }
function setSession(t){ try { t ? localStorage.setItem(LS_SESSION, t) : localStorage.removeItem(LS_SESSION); } catch {} }
function getSafeUser(){ try { return JSON.parse(localStorage.getItem(LS_USER) || 'null'); } catch { return null; } }
function setSafeUser(u){ try { u ? localStorage.setItem(LS_USER, JSON.stringify(u)) : localStorage.removeItem(LS_USER); } catch {} }

// -- API helpers (–≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ x-session) --------------------------
async function apiGet(url){
    const s = getSession();
    const r = await fetch(url, { headers: s ? { 'x-session': s } : {} });
    if (!r.ok) throw new Error('net');
    return r.json();
}
async function apiPost(url, body){
    const s = getSession();
    const r = await fetch(url, {
        method: 'POST',
        headers: { 'content-type':'application/json', ...(s ? { 'x-session': s } : {}) },
        body: JSON.stringify(body || {})
    });
    if (!r.ok) throw new Error('net');
    return r.json();
}

export function ProfilePage(){
    const root = document.createElement('div');
    root.className = 'page profile';
    root.innerHTML = `
  <header class="topbar"><h1>–ü—Ä–æ—Ñ–∏–ª—å</h1></header>
  <section class="content">
    <!-- –í—Ö–æ–¥ -->
    <div id="authBlock">
      <div class="card">
        <div class="card__title">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</div>
        <div class="muted">–ú—ã –æ—Ç–∫—Ä–æ–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ ‚Äî —è –≤—Å—ë –ø–æ–¥—Ö–≤–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</div>
        <div style="margin-top:12px;">
          <button id="tgDeep" class="btn primary">–û—Ç–∫—Ä—ã—Ç—å Telegram</button>
          <div id="status" class="muted" style="margin-top:8px;"></div>
        </div>
      </div>
    </div>

    <!-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -->
    <div id="userBlock" style="display:none;">
      <div class="card usercard">
        <img id="avatar" class="avatar" src="${AVATAR_FALLBACK}" alt="">
        <div class="user-meta">
          <div class="name-row">
            <div id="uname" class="uname">‚Äî</div>
            <div id="uid" class="uid">#------</div>
          </div>
          <div class="muted small">–ü—É–±–ª–∏—á–Ω—ã–π ID –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.</div>
          <div class="actions">
            <button id="editNameBtn" class="btn">–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è</button>
            <button id="logoutBtn" class="btn danger">–í—ã–π—Ç–∏</button>
          </div>
        </div>
      </div>

      <div class="grid navcards">
        <a class="navcard" href="#/favorites">
          <div class="nav-ico">‚ù§Ô∏è</div><div class="nav-title">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</div>
          <div class="nav-sub muted">–ú–∏–∫—Å—ã –∏ —Ç–∞–±–∞–∫–∏, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–¥—Ü–µ–º</div>
        </a>
        <a class="navcard" href="#/themes">
          <div class="nav-ico">üé®</div><div class="nav-title">–¢–µ–º—ã</div>
          <div class="nav-sub muted">–°–≤–µ—Ç–ª–∞—è / —Ç—ë–º–Ω–∞—è / –∞–≤—Ç–æ</div>
        </a>
        <a class="navcard" href="#/settings">
          <div class="nav-ico">‚öôÔ∏è</div><div class="nav-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
          <div class="nav-sub muted">–ü—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</div>
        </a>
        <a class="navcard" href="#/about">
          <div class="nav-ico">‚ÑπÔ∏è</div><div class="nav-title">–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</div>
          <div class="nav-sub muted">–í–µ—Ä—Å–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</div>
        </a>
      </div>
    </div>
  </section>
  <footer class="navbar">
    <a href="#/">–ì–ª–∞–≤–Ω–∞—è</a>
    <a href="#/favorites">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</a>
    <a class="active" href="#/profile">–ü—Ä–æ—Ñ–∏–ª—å</a>
  </footer>
  `;

    // –°—Ç–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    const style = document.createElement('style');
    style.textContent = `
    .card{ border:1px solid var(--border); border-radius:14px; padding:12px; background:var(--bg-elevated); }
    .card__title{ font-weight:700; margin-bottom:6px; }
    .btn{ border:1px solid var(--border); border-radius:10px; padding:8px 12px; background:transparent; }
    .btn.primary{ background:var(--bg-elevated-2, #f4f4f4); font-weight:600; }
    .btn.danger{ border-color:#ff9aa9; color:#c52340; }
    .muted{ opacity:.75; } .small{ font-size:.9em; }

    .usercard{ display:flex; gap:12px; align-items:center; }
    .avatar{ width:64px; height:64px; border-radius:50%; object-fit:cover; background:#ddd; }
    .user-meta{ flex:1; min-width:0; }
    .name-row{ display:flex; gap:10px; align-items:baseline; }
    .uname{ font-weight:700; font-size:18px; }
    .uid{ font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; opacity:.8; }
    .actions{ display:flex; gap:8px; margin-top:10px; flex-wrap:wrap; }

    .grid.navcards{ display:grid; grid-template-columns: repeat(2, minmax(0,1fr)); gap:12px; margin-top:12px; }
    @media (min-width: 920px){ .grid.navcards{ grid-template-columns: repeat(4, minmax(0,1fr)); } }
    .navcard{ display:block; text-decoration:none; color:inherit; border:1px solid var(--border);
              border-radius:12px; padding:12px; background:var(--bg-elevated); }
    .nav-ico{ font-size:22px; }
    .nav-title{ font-weight:700; margin-top:4px; }
    .nav-sub{ font-size:.92em; }
  `;
    document.head.appendChild(style);

    // refs
    const authBlock = root.querySelector('#authBlock');
    const userBlock = root.querySelector('#userBlock');
    const statusEl  = root.querySelector('#status');
    const avatarEl  = root.querySelector('#avatar');
    const unameEl   = root.querySelector('#uname');
    const uidEl     = root.querySelector('#uid');

    // UI helpers
    function showAuth(){ authBlock.style.display = '';   userBlock.style.display = 'none'; }
    function showUser(){ authBlock.style.display = 'none'; userBlock.style.display = '';    }

    function paintUser(u){
        if (!u){ showAuth(); return; }
        avatarEl.src = u.avatar_url || AVATAR_FALLBACK;
        unameEl.textContent = u.name || '‚Äî';
        uidEl.textContent   = u.short ? `#${u.short}` : '‚Äî';
        showUser();
    }

    // whoami -> —Å–æ—Ö—Ä–∞–Ω—è–µ–º "safe" –≤ LS
    async function refreshUser(){
        try{
            const j = await apiGet('/api/whoami'); // { ok, user: { id, short, name, avatar_url } }
            if (j?.ok && j.user){
                setSafeUser(j.user);
                paintUser(j.user);
            } else {
                setSession(''); setSafeUser(null); showAuth();
            }
        }catch{
            setSession(''); setSafeUser(null); showAuth();
        }
    }

    // –°—Ç–∞—Ä—Ç Telegram-–ª–æ–≥–∏–Ω–∞
    root.querySelector('#tgDeep').onclick = async () => {
        statusEl.textContent = '–ì–æ—Ç–æ–≤–∏–º —Å—Å—ã–ª–∫—É‚Ä¶';
        try{
            const start = await apiPost('/api/auth-start', {}); // { ok, state, url | httpsLink/tgLink }
            if (!start?.ok) { statusEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'; return; }

            const href = start.tgLink || start.httpsLink || start.url;
            if (href) window.open(href, '_blank');
            statusEl.textContent = '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram‚Ä¶';

            const t0 = Date.now();
            const poll = async () => {
                try{
                    const w = await apiGet(`/api/auth-wait?state=${encodeURIComponent(start.state)}`); // { ok, status, session }
                    if (w?.ok && w.status === 'ok' && w.session){
                        setSession(w.session);           // —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¢–û–õ–¨–ö–û —Ç–æ–∫–µ–Ω
                        await refreshUser();             // –∑–∞–±—Ä–∞–ª–∏ safe-–ø—Ä–æ—Ñ–∏–ª—å
                        statusEl.textContent = '';
                        return;
                    }
                }catch{}
                if (Date.now() - t0 > 120000){ statusEl.textContent = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ'; return; }
                setTimeout(poll, 1500);
            };
            poll();
        }catch{
            statusEl.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
        }
    };

    // –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ (—á–µ—Ä–µ–∑ x-session)
    root.querySelector('#editNameBtn').onclick = async () => {
        const safe = getSafeUser(); if (!getSession() || !safe) return alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ');
        const next = prompt('–ù–æ–≤–æ–µ –∏–º—è:', safe.name || '')?.trim();
        if (!next || next.length < 2) return;
        try{
            const j = await apiPost('/api/profile-name-change', { name: next });
            if (j?.ok){ await refreshUser(); alert('–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ'); }
            else alert(j?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è');
        }catch{ alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'); }
    };

    // –í—ã—Ö–æ–¥ ‚Äî —á–∏—Å—Ç–∏–º –∏ –ü–û–õ–ù–û–°–¢–¨–Æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    root.querySelector('#logoutBtn').onclick = () => {
        setSession(''); setSafeUser(null);
        location.reload();
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
    const s = getSession();
    const cached = getSafeUser();
    if (s && cached) paintUser(cached); else showAuth();
    if (s) refreshUser();

    return root;
}
