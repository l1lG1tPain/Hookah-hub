// netlify/functions/tg-webhook.js
// ESM-—Ñ—É–Ω–∫—Ü–∏—è Netlify

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE);

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TG_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TG_FILE = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const BRAND = 'ü¶à Hookah Hub';
const BUCKET = 'images'; // –±–∞–∫–µ—Ç –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤

/** –ü–æ–ª—É—á–∞–µ–º origin —Å–∞–π—Ç–∞ –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ env) */
function getSiteOrigin(event) {
    try {
        const u = new URL(event.rawUrl);
        return u.origin; // –Ω–∞–ø—Ä. https://hookahhub.netlify.app
    } catch {
        // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ rawUrl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return process.env.URL || process.env.DEPLOY_URL || 'https://hookahhub.netlify.app';
    }
}

/** –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (HTML) */
async function sendMessage(chatId, html, opts = {}) {
    try {
        const payload = {
            chat_id: chatId,
            text: html,
            parse_mode: 'HTML',
            ...opts,
        };
        await fetch(`${TG_API}/sendMessage`, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(payload),
        });
    } catch {
        // –≥–ª—É—à–∏–º ‚Äî –¢–µ–ª–µ–≥–µ –æ–∫ –æ—Ç–≤–µ—á–∞—Ç—å 200, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–µ—Ç—Ä–∞–µ–≤
    }
}

/** –ü—Ä–æ—Å—Ç–∞—è ¬´–æ–±—ë—Ä—Ç–∫–∞¬ª –Ω–∞–¥ –º–µ—Ç–æ–¥–∞–º–∏ Telegram API */
async function tg(method, body) {
    const res = await fetch(`${TG_API}/${method}`, {
        method: body ? 'POST' : 'GET',
        headers: body ? { 'content-type': 'application/json' } : undefined,
        body: body ? JSON.stringify(body) : undefined,
    });
    return res.json();
}

/** –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Telegram API –∏ –∫–ª–∞–¥—ë—Ç –≤ Supabase Storage; –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç public URL –∏–ª–∏ null */
async function fetchAvatarAndStore(tgId) {
    const photos = await tg('getUserProfilePhotos', { user_id: tgId, limit: 1 });
    if (!photos?.ok || photos.result.total_count === 0) return null;

    const sizes = photos.result.photos[0];
    const biggest = sizes[sizes.length - 1];
    const fileInfo = await tg('getFile', { file_id: biggest.file_id });
    if (!fileInfo?.ok) return null;

    const filePath = fileInfo.result.file_path;
    const imgRes = await fetch(`${TG_FILE}/${filePath}`);
    if (!imgRes.ok) return null;

    const buffer = Buffer.from(await imgRes.arrayBuffer());
    const path = `avatars/${tgId}.jpg`;

    try { await supabase.storage.from(BUCKET).remove([path]); } catch {}
    const up = await supabase.storage.from(BUCKET).upload(path, buffer, {
        contentType: 'image/jpeg',
        upsert: true,
    });
    if (up.error) return null;

    const { data } = supabase.storage.from(BUCKET).getPublicUrl(path);
    return data?.publicUrl || null;
}

/** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deep-link: /start login_<state> */
async function handleLoginStart(msg, state, profileUrl) {
    const chatId = msg.chat.id;
    const tg = msg.from;
    const tgId = tg.id;

    // 1) –ø—Ä–æ–≤–µ—Ä–∏–º state
    const { data: login, error: e1 } = await supabase
        .from('login_states')
        .select('*')
        .eq('state', state)
        .single();

    if (e1 || !login || login.status !== 'new') {
        await sendMessage(
            chatId,
            `${BRAND}\n\n‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.\n\n–û—Ç–∫—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ –∏ –Ω–∞—á–Ω–∏ –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ:`,
            {
                reply_markup: {
                    inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', url: profileUrl }]],
                },
            }
        );
        return 'invalid';
    }

    // 2) –∞–ø—Å–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (+ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –∞–≤–∞—Ç–∞—Ä)
    const name = tg.first_name || tg.username || `user_${tgId}`;

    let avatarUrl = null;
    try {
        const existing = await supabase
            .from('users')
            .select('id, avatar_url')
            .eq('tg_id', tgId)
            .maybeSingle();
        if (!existing.data || !existing.data.avatar_url) {
            avatarUrl = await fetchAvatarAndStore(tgId);
        } else {
            avatarUrl = existing.data.avatar_url;
        }
    } catch {}

    const { data: user, error: e2 } = await supabase
        .from('users')
        .upsert(
            { tg_id: tgId, name, avatar_url: avatarUrl ?? null },
            { onConflict: 'tg_id' }
        )
        .select()
        .single();

    if (e2) {
        await sendMessage(chatId, `${BRAND}\n\n‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.`);
        return 'error';
    }

    // 3) –æ—Ç–º–µ—á–∞–µ–º state = ok
    await supabase
        .from('login_states')
        .update({ tg_id: tgId, user_id: user.id, status: 'ok' })
        .eq('state', state);

    // 4) –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–≤–µ—Ç–∏–º
    await sendMessage(
        chatId,
        `${BRAND}\n\n‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n–ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä ‚Äî –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        { reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', url: profileUrl }]] } }
    );

    return 'ok';
}

/** –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π /start (–±–µ–∑ payload) */
async function handleStartPlain(msg, profileUrl) {
    const chatId = msg.chat.id;
    await sendMessage(
        chatId,
        `${BRAND}\n\n–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ –º–∏–∫—Å—ã.\n\n` +
        `–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏:\n1) –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ\n2) –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram¬ª\n3) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –∑–¥–µ—Å—å\n\n` +
        `–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä ‚Äî –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã.`,
        { reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', url: profileUrl }]] } }
    );
}

/** /help */
async function handleHelp(msg, profileUrl) {
    const chatId = msg.chat.id;
    await sendMessage(
        chatId,
        `${BRAND}\n\n<b>–ü–æ–º–æ—â—å</b>\n\n` +
        `‚Ä¢ –í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram¬ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è\n` +
        `‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –æ—Ü–µ–Ω–∫–∏ ‚Äî –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n` +
        `‚Ä¢ –í–æ–ø—Ä–æ—Å—ã/–∏–¥–µ–∏ ‚Äî —Å–º–µ–ª–æ –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üë®‚Äçüíª`,
        { reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', url: profileUrl }]] } }
    );
}

export const handler = async (event) => {
    try {
        // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∂—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤–µ–±—Ö—É–∫–∞
        const secret = process.env.TG_WEBHOOK_SECRET;
        if (secret) {
            const got = event.headers['x-telegram-bot-api-secret-token'];
            if (got !== secret) return { statusCode: 200, body: 'ok' };
        }

        if (event.httpMethod !== 'POST') {
            return { statusCode: 200, body: 'ok' };
        }

        const origin = getSiteOrigin(event);
        const profileUrl = `${origin}/#/profile`;

        const update = JSON.parse(event.body || '{}');
        const msg = update.message || update.edited_message;
        if (!msg || !msg.text) return { statusCode: 200, body: 'ok' };

        const raw = msg.text.trim();
        const [cmd, payload] = raw.split(/\s+/, 2);

        if (cmd === '/start' && payload?.startsWith('login_')) {
            const state = payload.slice('login_'.length);
            await handleLoginStart(msg, state, profileUrl);
            return { statusCode: 200, body: 'ok' };
        }

        if (cmd === '/start') {
            await handleStartPlain(msg, profileUrl);
            return { statusCode: 200, body: 'ok' };
        }

        if (cmd === '/help') {
            await handleHelp(msg, profileUrl);
            return { statusCode: 200, body: 'ok' };
        }

        await sendMessage(
            msg.chat.id,
            `${BRAND}\n\n–Ø —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã:\n` +
            `‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å\n` +
            `‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n\n` +
            `–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ.`,
            { reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', url: profileUrl }]] } }
        );

        return { statusCode: 200, body: 'ok' };
    } catch {
        return { statusCode: 200, body: 'ok' };
    }
};
